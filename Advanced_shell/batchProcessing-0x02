#!/bin/bash
# Script: pokemon_fetch.sh
# Objective: Fetch Pokémon data from the PokeAPI with error handling and retry logic

# Base API URL
API_URL="https://pokeapi.co/api/v2/pokemon"

# Input file containing Pokémon names (one per line)
INPUT_FILE="pokemon_list.txt"

# Output file
OUTPUT_FILE="pokemon_data.txt"

# Check if input file exists
if [[ ! -f "$INPUT_FILE" ]]; then
    echo "❌ Error: Input file '$INPUT_FILE' not found!"
    exit 1
fi

# Clear previous output
> "$OUTPUT_FILE"

# Function to make API request with retry logic
fetch_pokemon() {
    local name=$1
    local attempt=1
    local max_attempts=3
    local success=false

    while [[ $attempt -le $max_attempts ]]; do
        echo "🔍 Fetching data for '$name' (Attempt $attempt)..."
        response=$(curl -s -w "%{http_code}" -o temp_response.json "$API_URL/$name")

        http_code=${response: -3}
        if [[ "$http_code" == "200" ]]; then
            success=true
            break
        else
            echo "⚠️ Attempt $attempt failed (HTTP $http_code)"
            ((attempt++))
            sleep 2  # Wait before retrying
        fi
    done

    if [[ "$success" == true ]]; then
        name=$(jq -r '.name' temp_response.json)
        height=$(jq -r '.height' temp_response.json)
        weight=$(jq -r '.weight' temp_response.json)
        echo "$name | Height: $height | Weight: $weight" >> "$OUTPUT_FILE"
        echo "✅ Successfully fetched data for '$name'"
    else
        echo "❌ Failed to fetch data for '$name' after $max_attempts attempts" >> errors.log
    fi
}

# Main loop
echo "🚀 Starting Pokémon data fetch..."
while read -r pokemon; do
    [[ -z "$pokemon" ]] && continue  # Skip empty lines
    fetch_pokemon "$pokemon"
done < "$INPUT_FILE"

echo "🎯 Process completed! Check '$OUTPUT_FILE' for results and 'errors.log' for failures."
