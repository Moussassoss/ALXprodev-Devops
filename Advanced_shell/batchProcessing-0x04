#!/bin/bash
# --------------------------------------------------------
# Script: pokemon_parallel.sh
# Objective: Fetch Pok√©mon data in parallel using background processes
# --------------------------------------------------------

# Base API URL
API_URL="https://pokeapi.co/api/v2/pokemon"

# Pok√©mon list
POKEMONS=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Output files
OUTPUT_FILE="pokemon_parallel_data.txt"
ERROR_FILE="pokemon_parallel_errors.log"

# Clear previous data
> "$OUTPUT_FILE"
> "$ERROR_FILE"

# Function to fetch Pok√©mon data
fetch_pokemon() {
    local name=$1
    local response
    local http_code

    echo "üîç Fetching data for $name..."

    # Make API request
    response=$(curl -s -w "%{http_code}" -o temp_${name}.json "$API_URL/$name")
    http_code=${response: -3}

    if [[ "$http_code" == "200" ]]; then
        # Parse data using jq
        local pname=$(jq -r '.name' temp_${name}.json)
        local height=$(jq -r '.height' temp_${name}.json)
        local weight=$(jq -r '.weight' temp_${name}.json)
        echo "$pname | Height: $height | Weight: $weight" >> "$OUTPUT_FILE"
        echo "‚úÖ $name fetched successfully."
    else
        echo "‚ùå Failed to fetch $name (HTTP $http_code)" >> "$ERROR_FILE"
    fi

    # Clean up
    rm -f temp_${name}.json
}

# --------------------------------------------------------
# Main parallel processing section
# --------------------------------------------------------
echo "üöÄ Starting parallel data retrieval..."

for pokemon in "${POKEMONS[@]}"; do
    fetch_pokemon "$pokemon" &  # Run each in the background
done

# Wait for all background jobs to finish
wait

echo "üéØ All parallel fetches completed!"
echo "‚úÖ Data saved to: $OUTPUT_FILE"
echo "‚ö†Ô∏è Errors logged in: $ERROR_FILE"
