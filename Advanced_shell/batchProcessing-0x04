#!/bin/bash
# pokemon_parallel.sh
# Parallel Pok√©mon data fetch with proper process management

API_URL="https://pokeapi.co/api/v2/pokemon"
POKEMONS=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")
OUTPUT_FILE="pokemon_parallel_data.txt"
ERROR_FILE="pokemon_parallel_errors.log"

> "$OUTPUT_FILE"
> "$ERROR_FILE"

# Safety: Kill all background jobs if script is interrupted
trap "echo '‚ö†Ô∏è Script interrupted! Killing all background jobs...'; kill 0; exit 1" SIGINT SIGTERM

fetch_pokemon() {
    local name=$1
    echo "üîç Fetching $name..."
    response=$(curl -s -w "%{http_code}" -o temp_${name}.json "$API_URL/$name")
    http_code=${response: -3}
    if [[ "$http_code" == "200" ]]; then
        local pname=$(jq -r '.name' temp_${name}.json)
        local height=$(jq -r '.height' temp_${name}.json)
        local weight=$(jq -r '.weight' temp_${name}.json)
        echo "$pname | Height: $height | Weight: $weight" >> "$OUTPUT_FILE"
    else
        echo "‚ùå Failed to fetch $name (HTTP $http_code)" >> "$ERROR_FILE"
    fi
    rm -f temp_${name}.json
}

# Start all fetches in background
for p in "${POKEMONS[@]}"; do
    fetch_pokemon "$p" &
done

# Wait for all background jobs
wait

echo "üéØ All Pok√©mon fetched. Data: $OUTPUT_FILE"
echo "‚ö†Ô∏è Check $ERROR_FILE for errors"
